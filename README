ESREVER (part of the StudioBlood LADSPA plugin package, hence the sb_ prefix)
-------
July 20, 2009. Tyler Hayes. Portland, OR.

esreveR is an audio plug-in using LADSPA (Linux Audio Developers Simple Programming API).
My first idea for a LADSPA plugin was to simply take a sound file and reverse it, because
to my surprise I didn't see any on the internet that performed such a simple effect.
But to my ignorance, pretty much all audio editing hosts already have that effect built-in.
Not only that, but LADSPA plugins are mainly for effects that act like guitar effects
pedals and can't take any entire file and manipulate it as such because the plugins use
blocks of samples rather than the whole sound file.

So this plugin takes each block of samples sent by the host, and reverses sub-blocks
of random sizes (between 0.2 and 1.5 seconds).  Probably not much practical use for
the average person, but more of a random effect for those like me who like to create
weird and new sounds.  Also note that if the sound file is in stereo, each channel is
done seperately, so they will be out of synch so to speak.

The name esreveR is just Reverse backwards if you didn't already catch that.

It is written in C with much help from Bart Massey, Richard Brent, Tom Szilagyi,
David Benson, Dave Phillips, and Richard Furse--the source file(s) provide the
official thanks and acknowledgements in their respective headers.

This plug-in can be used with any audio program that supports LADSPA plug-ins.
See your favorite audio program's specifications to see if it supports LADSPA
plug-ins.  I used Audacity to test the plugin, but will most likely use Ardour
as my primary audio tool.

I am still a student programmer at the time of this writing, so some of the comments
in the source code are detailed and directed at the beginner as well.  Hopefully
the comments will be beneficial to those who were like me in learning the API,
and not too annoying for the pro's out there.

To install, make sure the LADSPA_PATH variable in the Makefile is correct to your
environment, and just run (as root) make install.

Here, for no reason, is the pseudo code for the run() function of sb_esreveR.c:

-----

if the total sample count is less than or equal to 1, then
	return
if plugin instance is NULL
	return
if the sample rate is less than 10
	return 

set an input reader to the beginning of the input buffer
set an output writer to the beginning of output buffer
set the minimum samples to reverse to 0.2 * the sample rate
set the maximum samples to reverse to 1.5 * the sample rate
set a start position to 0
set an input index to 0
set an output index to 0

while the output index has not reached the end of the output buffer, do
   set the random number lower bound to start position + minimum samples
   set the random number upper bound to start position + maximum samples

   if the random number lower bound is within minimum samples of the end of \
    the block or beyond the end of the block, then
      set the input index to one less than the last sample of the block
   end if

   else, then
      if the random number upper bound is within minimum samples away \
       from the end of the block, then
         set random number upper bound to the end of block minus minimum samples
      end if

      seed a random number generator with the current time
      get a random number between the random number lower and upper bounds
      set the input index to one less than the random number
   end if

   while the input index is not less than the start position
      set the output buffer's value at the output index to the input \
       buffer's value at the input index
      increment the output index
      decrement the input index
   end loop

   set the start position to the random number
end loop

-----

EOF
